#!/bin/bash

###########################################
# Project : Pentesting_Quickstart
# Element : PE_PAYLOAD
# Version : 1.0.1

###########################################
# Author : Connor Maddison
# Creation Date : 05/27/2022
# Version Date : 05/27/2022

###########################################



########################################
# Colorcodes
########################################

RED="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"
DARKGREY="\033[1;90m" 
NC="\033[0m"

########################################

loadingBar(){
########################################
# Create loading bar for aesthetics
# Gives a chance to see where areas with alearts are
########################################
# Arg 1 = length

i=0
while [ $i -ne $1 ]
do
        i=$(($i+1))
        echo -n -e "\b$BLUE-$GREEN\$$NC"
        sleep 0.05
done

}

########################################
# Header
########################################

echo -e $DARKGREY'===================================================================================================\n\n'$NC
echo -e $GREEN' /$$$$$$$  /$$$$$$$$        /$$$$$$$   /$$$$$$  /$$     /$$ /$$        /$$$$$$   /$$$$$$  /$$$$$$$ 
| $$__  $$| $$_____/       | $$__  $$ /$$__  $$|  $$   /$$/| $$       /$$__  $$ /$$__  $$| $$__  $$
| $$  \ $$| $$             | $$  \ $$| $$  \ $$ \  $$ /$$/ | $$      | $$  \ $$| $$  \ $$| $$  \ $$
| $$$$$$$/| $$$$$          | $$$$$$$/| $$$$$$$$  \  $$$$/  | $$      | $$  | $$| $$$$$$$$| $$  | $$
| $$____/ | $$__/          | $$____/ | $$__  $$   \  $$/   | $$      | $$  | $$| $$__  $$| $$  | $$
| $$      | $$             | $$      | $$  | $$    | $$    | $$      | $$  | $$| $$  | $$| $$  | $$
| $$      | $$$$$$$$       | $$      | $$  | $$    | $$    | $$$$$$$$|  $$$$$$/| $$  | $$| $$$$$$$/
|__/      |________//$$$$$$|__/      |__/  |__/    |__/    |________/ \______/ |__/  |__/|_______/ 
                   |______/                                                                        '$NC
                   
echo -e $DARKGREY'\n\n===================================================================================================\n'$NC   

echo -e $GREEN"Program : PE_PAYLOAD"$NC
echo -e $BLUE"Author$NC : Connor Maddison"
echo -e $BLUE"Version$NC : 1.0.1\n"
echo "Loading..."

loadingBar 100



header()
{
########################################
# Create consistant headers
########################################

#0 = Nothing found
#1 = something found
found=$(echo $2)

#second argument triggers outline colour to change (used if something found)
if [ $found == 0 ]
then
	color=$DARKGREY
elif [ $found == 1 ]
then
	color=$RED
else
	color=$DARKGREY
fi


echo -e "\n\n$color=========================================================\n$GREEN------||$1 $color [ + ] \n=========================================================$NC"

}

body()
{
########################################
# Create consistant body content
########################################
#arg 1 = header
#arg 2 = content
#arg 3 = found something (0 = nothing, 1= something)

found=$(echo $3)

#second argument triggers outline colour to change (used if something found)
if [ $found == 0 ]
then
	color=$BLUE
elif [ $found == 1 ]
then
	color=$RED
else
	color=$BLUE
fi

echo -e $BLUE"\n------||$1: $color[ + ] $NC \n$2"

}


########################################
# Find host details
########################################


echo "$(header "Host details" 0)"

#clean issue due to random \n \l addition
issue=$(cat /etc/issue)
issue=${issue/"\l"/""}
issue=${issue/"\n"/""}

########################################
#Output
echo "$(body "Kernel Info" "$(uname -a) $(cat /proc/version)" 0)"
echo "$(body "Hostname" "$(hostname)" 0)"
echo "$(body "Issue" "$issue" 0)"
echo "$(body "Sudo version" "$(sudo --version)" 0)"
echo "$(body "Date" "$(date)\n$(uptime)" 0)"

########################################
# Find user details
########################################

homeUsers=$(cat /etc/passwd | cut -d: -f6 | grep '/home\|/root' | awk '{gsub("/home","\033[1;31m/home\033[0m",$0); gsub("/root","\033[1;31m/root\033[0m",$0); print$0}' )
id=$(id | cut -d, -f1)
groups=$(id | cut -d, -f2- | awk '{gsub(",","\n",$0); print$0}')
uid=$(echo $id | cut -d"(" -f2 | cut -d")" -f1) #split UID from id
gid=$(echo $id | cut -d"(" -f3 | cut -d")" -f1) #split GID from id
foundSomething=0

if [[ ! -z $homeUsers ]]
then
	#not empty
	homeUsersFound=1
	foundSomething=1
else
	#empty
	homeUsersFound=0
fi


########################################
#Output
echo "$(header "User details" $foundSomething)"
loadingBar 58
echo "$(body "Active Users" "$(users)" 0)"
echo "$(body "Found Users" "$(cat /etc/passwd | cut -d: -f1)" 0)"
echo "$(body "Home Directories" "$homeUsers" $homeUsersFound)"
echo "$(body "Current user" "$id\nName: $uid\nGroup: $gid\nAccess To:\n$groups" 0)"


########################################
# Find environment details
########################################

foundSomething=0


########################################
#Output
echo "$(header "Environment details" $foundSomething)"
loadingBar 58
echo "$(body "Environment Variables" "$(env)" 0)"
echo "$(body "Path" "$(echo $PATH)" 0)"

########################################
# Find usefull programs
########################################

foundSomething=0

#Search for usefull programs
#Add colour codes here to maintain format
groupAccess=$(find /usr/bin -group $gid 2>/dev/null)
usrAccess=$(find /usr/bin -user $uid 2>/dev/null)

WiderGroupAccess=$(find /usr/bin ! -group root 2>/dev/null)
WiderUserAccess=$(find /usr/bin ! -user root 2>/dev/null)

pySearch=$(find / -name python3 2>/dev/null | awk '{gsub("/python","\033[1;31m/python\033[0m",$0); print$0}')
ncSearch=$(find / -name nc 2>/dev/null | awk '{gsub("/nc","\033[1;31m/nc\033[0m",$0); print$0}')


#Access for user
if [[ ! -z $groupAccess ]]
then
	AccessFound=1
	foundSomething=1
elif [[ ! -z $usrAccess ]]
then
	AccessFound=1
	foundSomething=1
else
	AccessFound=0
fi


#access for wider users
if [[ ! -z $WiderGroupAccess ]]
then
	WiderAccessFound=1
	foundSomething=1
elif [[ ! -z $WiderUserAccess ]]
then
	WiderAccessFound=1
	foundSomething=1
else
	WiderAccessFound=0
fi

#Py exists
if [[ ! -z $pySearch ]]
then
	pyFound=1
	foundSomething=1
	pySearch="Python Found:\n$pySearch\n"$RED"Python Version$NC: $(python --version)"
else
	pyFound=0
	pySearch="No python found"
fi
#nc exists
if [[ ! -z $ncSearch ]]
then
	ncFound=1
	foundSomething=1
	ncSearch="ncat Found:\n$ncSearch\n"
else
	ncFound=0
	ncSearch="No ncat found"
fi

#find / -name python3 2>/dev/null


########################################
#Output
echo "$(header "Usefull Programs" $foundSomething)"
loadingBar 58
echo "$(body "Access to /usr/bin for $uid" "" $AccessFound)" 
	echo -e $BLUE"Group Access:$NC"
	for x in ${groupAccess[$@]}
	do
		echo $(ls -la $x)
	done
	echo -e $BLUE"User Access:$NC"
	for x in ${usrAccess[$@]}
	do
		echo $(ls -la $x)
	done
	
echo "$(body "Non Root Access to /usr/bin" "" $WiderAccessFound)" 
	echo -e $BLUE"Group Access:$NC"
	for x in ${WiderGroupAccess[$@]}
	do
		echo $(ls -la $x)
	done
	echo -e $BLUE"User Access:$NC"
	for x in ${WiderUserAccess[$@]}
	do
		echo $(ls -la $x)
	done


echo "$(body "Python" "$pySearch" $pyFound)" 
echo "$(body "Netcat" "$ncSearch" $ncFound)" 


########################################
# Find SUID details
########################################

foundSomething=0

SUIDBIT=$(find / -type f -perm /6000 2>/dev/null)

if [[ ! -z $SUIDBIT ]]
then
	suidFound=1
	foundSomething=1
else
	suidFound=0
	SUIDBIT="No files with SUID BIT"
fi
	


########################################
#Output
echo "$(header "Potential Privledge Escalation Points" $foundSomething)"
loadingBar 58
echo "$(body "Potential SUID Access Elevation" "" $suidFound)" 
	for x in ${SUIDBIT[$@]}
	do
		echo -e $(ls -la $x | cut -d" " -f1 | awk '{gsub("s","\033[1;31ms\033[0m",$0); print$0}')$(ls -la $x | cut -d" " -f2-)
	done
	

########################################
# Find Connection details
########################################

foundSomething=0


########################################
#Output
echo "$(header "Network Connections" $foundSomething)"
loadingBar 58
echo "$(body "Ip details" "$(ip addr)" 0)" 
echo "$(body "Ip routes" "$(ip route)" 0)"
echo "$(body "Open ports" "$(netstat -l)" 0)"


history | tail -n 20



exit 0


ps -A
ps axjf

