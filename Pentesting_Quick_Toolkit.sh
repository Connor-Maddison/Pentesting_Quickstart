#!/bin/bash

###########################################
# Project : Pentesting_Quickstart
# Element : Pentesting_Quick_Toolkit
# Version : 1.0.1

###########################################
# Author : Connor Maddison
# Creation Date : 05/25/2022
# Version Date : 05/26/2022

###########################################

targetIp=""
reportingDir=""

Boot()
{

#############################
#Commands that run as comand is launched
#Preps the system
#############################

	#Check that xterm is installed for commands to function
	xtermFinder=$(find / -name xterm 2>/dev/null)
	found=false
	
	if "/usr/bin/xterm" in $xtermFinder
	then
		found=true
	else
		echo "xterm not located, please install"
		found=false
		exit 2
	fi
		
	#Load in the previously used targets for quickly returning
	targetIp=$(<~/Documents/Pentesting_Quickstart/targetIp.txt)
	reportingDir=$(<~/Documents/Pentesting_Quickstart/ReportingDir.txt)
	reportingDir=$(DirCheck $reportingDir)
}

DirCheck()
{

#############################
#If ~ is used replace it with current user so that programs dont error
#############################

	#get current user
	user=$(whoami)
	target=$(echo $1)
	#replace ~ with their home dir
	clean=${target/"~"/"/home/$user"}
	echo $clean
	
	#add relevent dirs to reporting space
}

Menu()
{

#############################
# Initial menu for setting target and reporting location
#############################

	echo "--------------------------------------"
	echo "Targeting IP : " $targetIp
	echo "Reporting to : "$reportingDir

	accept=false
	
	#loop untill an option is selected
	while [ $accept == false ]
	do
		echo "--------------------------------------"
		echo "Would you like to change this?"
		echo "[0] - Keep Target"
		echo "[1] - Change Target"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 
		then
			echo "Keeping Target"
			echo "--------------------------------------"
			accept=true
		elif [ $responce == 1 ]
		then
			echo "Changing Target"
			echo "--------------------------------------"
			SetTarget
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			exit 0
		else
			echo "Incorrect Input"
		fi
	done
	
	#link to choices
	MainOptions

}

MainOptions()
{

#############################
#This is where all the commands are stored
#e.g. nmap, feroxbuster, etc...
#############################

	#Create reporting template
	ReportingDirTemplate

	
	#loop forever
	while true
	do
	
#Menu for choices
echo -e "
--------------------------------------
What would you like to do?

[q] or [c] - Quit
--------------------------------------
[0] - Print Target
[1] - Change Target
[2] - Nmap Recon
[3] - Nc Listener
[4] - Dictionary Cleaner
[5] - WebBuster
[6] - Web Login Brute-force
[7] - Crack Hash
--------------------------------------"
		read choice
		
		#list of choices
		case $choice in

			0) # Print target again
				echo "--------------------------------------"
				echo "Targeting IP : " $targetIp
				echo "Reporting to : "$reportingDir
				echo "--------------------------------------"
			;;
			
			1) # Change target
				echo "Changing Target"
				echo "--------------------------------------"
				SetTarget
			;;
			
			2) # run default NMAP recon scan
				echo "--------------------------------------"
				ScanTarget
			;;
			
			3) # run NC listener
				echo "--------------------------------------"
				NcListener
			;;
			
			4) # run dictionary cleaner
				echo "--------------------------------------"
				DictionaryClean
			;;
			
			5) # run default feroxbuster scan
				echo "--------------------------------------"
				WebBuster
			;;
			
			6) # run hydra on webpage
				echo "--------------------------------------"
				webBruteLogin
			;;
			
			7) # run ripper on hash
				echo "--------------------------------------"
				John_Rip
			;;
			
			q | c) # quit program
				exit 0
			;;
			

			*) # if incorrect imput tell user
			   	echo "Incorrect Input"
			;;
		esac

	done
}


SetTarget()
{

#############################
#set the target IP and reporting dir
#############################

	echo "Enter Target IP: "
	read targetIp 
	echo $targetIp > ~/Documents/Pentesting_Quickstart/targetIp.txt
	echo "Set Reporting Directory (must end in / ): "
	read -e reportingDir dir
	reportingDir=$(DirCheck $reportingDir)
	echo $reportingDir > ~/Documents/Pentesting_Quickstart/ReportingDir.txt
	echo "--------------------------------------"
	echo "Targeting IP : " $targetIp
	echo "Reporting to : "$reportingDir
	echo "--------------------------------------"
	
}

ReportingDirTemplate()
{

#############################
#make the dir repositories required for reporting
#############################

	#don't show error if dir exists
	#Create the required directories
	mkdir $reportingDir"nmap_scans" 2>/dev/null	
	mkdir $reportingDir"dictionaries" 2>/dev/null
	mkdir $reportingDir"web_busts" 2>/dev/null
	mkdir $reportingDir"exploits" 2>/dev/null
	mkdir $reportingDir"hashes" 2>/dev/null
	mkdir $reportingDir"brute" 2>/dev/null
	
	
	#create a notes doc with intro
	echo -e "\nPentest of $targetIp \nDate : $(date +"%h %d %Y")\nTime : $(date +"%H:%M:%S")\n" >> $reportingDir"notes.txt"

	
}

FileFormatter()
{

#############################
#Repeatable source to format files the same way consistently
#$1 = dir+identafiable name e.g.nmap_scans/Nmap_Recon_Scan.xml
#############################
	
	
	path=$(echo $1)
	
	
	filename=$reportingDir$path
	
	echo $filename
	

}

ScanTarget()
{

#############################
#Run nmap scan in new xterm terminal
#Default detection scan (minimal perameters)
#Print command so it can be coppied from terminal easily
#############################

	#Determine if a simple scan or vulnerable scan is required
	accept=false
	statement=""
	
	#loop untill an option is selected
	while [ $accept == false ]
	do
		echo "Would you like to run a standard scan or vuln scan"
		echo "[0] - Standard"
		echo "[1] - Vuln"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 	#use target IP to search
		then
			echo "Running Standard scan"
			echo "--------------------------------------"
			statement="nmap -sC -sV"
			accept=true
		elif [ $responce == 1 ]	#Search a specific URL (domain assosiated with IP)
		then
			echo "Running Vuln scan"
			echo "--------------------------------------"
			statement="sudo nmap --script vuln" 
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			return 0
		else
			echo "Incorrect Input"
		fi
	done



	#readable file naming
	filename=$(FileFormatter "nmap_scans/Nmap_Recon_Scan_$(date +"%H_%M_%S_%h_%d").xml")
	
	
	command="$statement -v $targetIp -oX $filename;"
	
	#print command
	echo "running command : $command "
	echo "saving to : $filename"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &
}

NcListener()
{

#############################
#Open a netcat lisener on entered port
#############################

	echo "Set the port to listen on"
	read port
	
	command="nc -lnvp $port;"
	
	#print command
	echo "running command : $command "
	echo "Opening on port : $port"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &

}

DictionaryClean()
{

#############################
#Sort and Unique dictionary to make it quicker to brute
#############################

	echo "select dictionary (full directory name)"
	read -e file
	
	file_clean=$(DirCheck $file) # change ~ into /home/usr
	
	
	#get the name of the file and split it into its name and extention
	name=$(echo $file | rev | cut -d/ -f1 | rev)
	open=$(echo $name | cut -d. -f1)
	ext=$(echo $name | rev | cut -d. -f1 | rev)
	
	
	filename=$(FileFormatter "dictionaries/$open""_Cleaned.$ext")
	
	
	command="sort $file_clean | uniq > $filename;"
	
	#print command
	echo "running command : $command "
	echo "saving to : $filename"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &
	
}

WebBuster()
{

#############################
#Crawl address for extensions
#############################

		
	accept=false
	targetURL=""
	
	#loop untill an option is selected
	while [ $accept == false ]
	do
		echo "Would you like to search target IP or a specific address"
		echo "[0] - target IP"
		echo "[1] - specific address"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 	#use target IP to search
		then
			echo "Keeping Target"
			echo "--------------------------------------"
			targetURL="http://"$targetIp 
			accept=true
		elif [ $responce == 1 ]	#Search a specific URL (domain assosiated with IP)
		then
			echo "Changing Target"
			echo "--------------------------------------"
			echo "enter address URL : "
			read url
			targetURL=$url 
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			return 0
		else
			echo "Incorrect Input"
		fi
	done
	
	filename=$(FileFormatter "web_busts/Web_Extensions_$(date +"%H_%M_%S_%h_%d").txt")
	
	
	command="feroxbuster -u $targetURL -x html,php,js,py,css > $filename | tee $filename;" #scan against common web extentions
	
	#print command
	echo "running command : $command "
	echo "saving to : $filename"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &


}

webBruteLogin()
{

#############################
#brute a web login page w/ hydra
#enter static or list options
#############################

	accept=false
	targetURL=""
	
	#address option for web address alternitives
	while [ $accept == false ]
	do
		echo "Would you like to search target IP or a specific address (not including extentions)"
		echo "[0] - target IP"
		echo "[1] - specific address"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 	#use target IP to search
		then
			echo "Keeping Target"
			echo "--------------------------------------"
			targetURL=$targetIp 
			accept=true
		elif [ $responce == 1 ]	#Search a specific URL (domain assosiated with IP)
		then
			echo "Changing Target"
			echo "--------------------------------------"
			echo "enter address URL : "
			read url
			targetURL=$url 
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			return 0
		else
			echo "Incorrect Input"
		fi
	done

	accept=false
	user=""
	
	#chose between static or list user
	while [ $accept == false ]
	do
		echo "Do you have a static login or list"
		echo "[0] - static"
		echo "[1] - list"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 	#use static login
		then
			echo "Enter static username:"
			read username
			echo "--------------------------------------"
			user="-l $username" #static in lower l
			accept=true
		elif [ $responce == 1 ]	#use list login
		then
			echo "Enter username list:"
			read -e username
			username=$(DirCheck $username)
			echo "--------------------------------------"
			user="-L $username" #lists in capital L
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			return 0
		else
			echo "Incorrect Input"
		fi
	done
	
	accept=false
	pass=""
	
	#chose between static or list password
	while [ $accept == false ]
	do
		echo "Do you have a static password or list"
		echo "[0] - static"
		echo "[1] - list"
		echo "--------------------------------------"
		read responce
		

		if [ $responce == 0 ] 	#use static password
		then
			echo "Enter static password:"
			read password
			echo "--------------------------------------"
			pass="-p $password" #static in lower p
			accept=true
		elif [ $responce == 1 ]	#use list password
		then
			echo "Enter password list:"
			read -e password
			username=$(DirCheck $password)
			echo "--------------------------------------"
			pass="-P $password" #lists in capital P
			accept=true	
		elif [ $responce == "q" ] || [ $responce == "c" ]
		then
			echo "quitting program"
			return 0
		else
			echo "Incorrect Input"
		fi
	done

	#enter extention for login page
	
	echo "Enter any extentions for webpage (e.g. address </login.php>):"
	read ext
	echo "Enter http-post request (e.g. user=^USER^&pass=^PASS^):"
	read request
	echo "Enter fail catch request (e.g. Username or password invalid):"
	read catch
	echo "--------------------------------------"
	
	echo "scanning $targetURL$ext"


	filename=$(FileFormatter "brute/Web_Brute_$(date +"%H_%M_%S_%h_%d").txt")
	
	
	command="hydra $user $pass $targetURL http-post-form \"$ext:$request:$catch\" -t 30 > $filename | tee $filename;" #brute force a website login page
	
	#print command
	echo "running command : $command "
	echo "saving to : $filename"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &

}

John_Rip()
{

#############################
#brute a web login page w/ hydra
#enter static or list options
#############################

	#enter details for John
	
	echo "Enter wordlist to use:"
	read -e wordlist
	echo "Enter file to crack"
	read -e hash
	echo "--------------------------------------"

	name=$(echo $hash | rev | cut -d/ -f1 | rev)
	name=$(echo $name | cut -d. -f1)
	
	filename=$(FileFormatter "hashes/Hash_Crack_$name_$(date +"%H_%M_%S_%h_%d").txt")
	
	
	command="john --wordlist=$wordlist $hash > $filename | tee $filename;" #brute force a website login page
	
	#print command
	echo "running command : $command "
	echo "saving to : $filename"
	
	#launch in terminal
	xterm -e "$command echo -n  \"\n\nTask Complete : [press any key to close]\"; read line" &


}

Boot
Menu
